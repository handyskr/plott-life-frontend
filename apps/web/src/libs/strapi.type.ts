/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/announcements": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["announcement/get/announcements"];
    put?: never;
    post: operations["announcement/post/announcements"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/announcements/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["announcement/get/announcements_by_id"];
    put: operations["announcement/put/announcements_by_id"];
    post?: never;
    delete: operations["announcement/delete/announcements_by_id"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/authors": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["author/get/authors"];
    put?: never;
    post: operations["author/post/authors"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/authors/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["author/get/authors_by_id"];
    put: operations["author/put/authors_by_id"];
    post?: never;
    delete: operations["author/delete/authors_by_id"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/blog-categories": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["blog-category/get/blog_categories"];
    put?: never;
    post: operations["blog-category/post/blog_categories"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/blog-categories/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["blog-category/get/blog_categories_by_id"];
    put: operations["blog-category/put/blog_categories_by_id"];
    post?: never;
    delete: operations["blog-category/delete/blog_categories_by_id"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/blog-posts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["blog-post/get/blog_posts"];
    put?: never;
    post: operations["blog-post/post/blog_posts"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/blog-posts/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["blog-post/get/blog_posts_by_id"];
    put: operations["blog-post/put/blog_posts_by_id"];
    post?: never;
    delete: operations["blog-post/delete/blog_posts_by_id"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/faqs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["faq/get/faqs"];
    put?: never;
    post: operations["faq/post/faqs"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/faqs/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["faq/get/faqs_by_id"];
    put: operations["faq/put/faqs_by_id"];
    post?: never;
    delete: operations["faq/delete/faqs_by_id"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/faq-categories": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["faq-category/get/faq_categories"];
    put?: never;
    post: operations["faq-category/post/faq_categories"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/faq-categories/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["faq-category/get/faq_categories_by_id"];
    put: operations["faq-category/put/faq_categories_by_id"];
    post?: never;
    delete: operations["faq-category/delete/faq_categories_by_id"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tags": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["tag/get/tags"];
    put?: never;
    post: operations["tag/post/tags"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tags/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["tag/get/tags_by_id"];
    put: operations["tag/put/tags_by_id"];
    post?: never;
    delete: operations["tag/delete/tags_by_id"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    ApiTagTagDocument: {
      /**
       * Format: uuid
       * @description The document ID, represented by a UUID
       */
      documentId: string;
      id: number;
      /** @description A string field */
      name?: string;
      /** @description A UID field */
      slug?: string;
      /** @description A datetime field */
      createdAt?: string;
      /** @description A datetime field */
      updatedAt?: string;
      /**
       * @description A datetime field
       * @default 2025-09-19T10:24:09.248Z
       */
      publishedAt: string;
    };
    SeoMetaEntry: {
      /** @description A string field */
      metaTitle?: string;
      /** @description A text field */
      metaDescription?: string;
      /** @description A string field */
      keywords?: string;
      /** @description A string field */
      ogTitle?: string;
      /** @description A text field */
      ogDescription?: string;
      /**
       * @description An enum field
       * @default website
       * @enum {string}
       */
      ogType: "website" | "article" | "product" | "profile";
      /** @description A media field */
      ogImage?: components["schemas"]["PluginUploadFileDocument"];
    };
    PluginUploadFileDocument: {
      /**
       * Format: uuid
       * @description The document ID, represented by a UUID
       */
      documentId: string;
      id: number;
      /** @description A string field */
      name: string;
      /** @description A string field */
      alternativeText?: string;
      /** @description A string field */
      caption?: string;
      /** @description An integer field */
      width?: number;
      /** @description An integer field */
      height?: number;
      /** @description A JSON field */
      formats?: unknown;
      /** @description A string field */
      hash: string;
      /** @description A string field */
      ext?: string;
      /** @description A string field */
      mime: string;
      /** @description A decimal field */
      size: number;
      /** @description A string field */
      url: string;
      /** @description A string field */
      previewUrl?: string;
      /** @description A string field */
      provider: string;
      /** @description A JSON field */
      provider_metadata?: unknown;
      /** @description A datetime field */
      createdAt?: string;
      /** @description A datetime field */
      updatedAt?: string;
      /**
       * @description A datetime field
       * @default 2025-09-19T10:24:09.250Z
       */
      publishedAt: string;
      related: unknown;
    };
    ApiBlogCategoryBlogCategoryDocument: {
      /**
       * Format: uuid
       * @description The document ID, represented by a UUID
       */
      documentId: string;
      id: number;
      /** @description A string field */
      name?: string;
      /** @description A UID field */
      slug?: string;
      /** @description A datetime field */
      createdAt?: string;
      /** @description A datetime field */
      updatedAt?: string;
      /**
       * @description A datetime field
       * @default 2025-09-19T10:24:09.274Z
       */
      publishedAt: string;
      /** @description A relational field */
      parent?: components["schemas"]["ApiBlogCategoryBlogCategoryDocument"];
      /** @description A component field */
      seo?: components["schemas"]["SeoMetaEntry"];
    };
    ApiFaqFaqDocument: {
      /**
       * Format: uuid
       * @description The document ID, represented by a UUID
       */
      documentId: string;
      id: number;
      /** @description A string field */
      question: string;
      /**
       * @description A boolean field
       * @default false
       */
      pin: boolean;
      /**
       * @description An integer field
       * @default 0
       */
      order: number;
      /** @description A datetime field */
      createdAt?: string;
      /** @description A datetime field */
      updatedAt?: string;
      /**
       * @description A datetime field
       * @default 2025-09-19T10:24:09.295Z
       */
      publishedAt: string;
      /** @description A dynamic zone field */
      answer?: unknown[];
      /** @description A relational field */
      category?: components["schemas"]["ApiFaqCategoryFaqCategoryDocument"];
      /** @description A relational field */
      tags?: components["schemas"]["ApiTagTagDocument"][];
      /** @description A relational field */
      relatedFaqs?: components["schemas"]["ApiFaqFaqDocument"][];
      /** @description A component field */
      seo?: components["schemas"]["SeoMetaEntry"];
    };
    ApiFaqCategoryFaqCategoryDocument: {
      /**
       * Format: uuid
       * @description The document ID, represented by a UUID
       */
      documentId: string;
      id: number;
      /** @description A string field */
      name: string;
      /** @description A UID field */
      slug: string;
      /**
       * @description An enum field
       * @enum {string}
       */
      audience?: "guest" | "host";
      /** @description A text field */
      description?: string;
      /**
       * @description An integer field
       * @default 0
       */
      order: number;
      /** @description A datetime field */
      createdAt?: string;
      /** @description A datetime field */
      updatedAt?: string;
      /**
       * @description A datetime field
       * @default 2025-09-19T10:24:09.295Z
       */
      publishedAt: string;
      /** @description A relational field */
      faqs?: components["schemas"]["ApiFaqFaqDocument"][];
      /** @description A component field */
      seo?: components["schemas"]["SeoMetaEntry"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  "announcement/get/announcements": {
    parameters: {
      query?: {
        fields?: ("title" | "slug" | "audience" | "importance" | "pinned" | "createdAt" | "updatedAt" | "publishedAt")[];
        filters?: {
          [key: string]: unknown;
        };
        _q?: string;
        pagination?: {
          /** @description Include total count in response */
          withCount?: boolean;
        } & ({
          /** @description Page number (1-based) */
          page: number;
          /** @description Number of entries per page */
          pageSize: number;
        } | {
          /** @description Number of entries to skip */
          start: number;
          /** @description Maximum number of entries to return */
          limit: number;
        });
        sort?: ("title" | "slug" | "audience" | "importance" | "pinned" | "createdAt" | "updatedAt" | "publishedAt") | ("title" | "slug" | "audience" | "importance" | "pinned" | "createdAt" | "updatedAt" | "publishedAt")[] | {
          [key: string]: "asc" | "desc";
        } | {
          [key: string]: "asc" | "desc";
        }[];
        populate?: "*" | ("body" | "tags" | "seo") | ("body" | "tags" | "seo")[];
        status?: "draft" | "published";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              title: string;
              /** @description A UID field */
              slug: string;
              /**
               * @description An enum field
               * @default all
               * @enum {string}
               */
              audience: "all" | "guest" | "host";
              /**
               * @description An enum field
               * @default info
               * @enum {string}
               */
              importance: "info" | "notice" | "urgent";
              /**
               * @description A boolean field
               * @default false
               */
              pinned: boolean;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.244Z
               */
              publishedAt: string;
              /** @description A dynamic zone field */
              body?: unknown[];
              /** @description A relational field */
              tags?: components["schemas"]["ApiTagTagDocument"][];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            }[];
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "announcement/post/announcements": {
    parameters: {
      query?: {
        fields?: ("title" | "slug" | "audience" | "importance" | "pinned" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | ("body" | "tags" | "seo") | ("body" | "tags" | "seo")[];
        status?: "draft" | "published";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": {
          data: {
            /** @description A string field */
            title: string;
            /** @description A UID field */
            slug: string;
            /**
             * @description An enum field
             * @default all
             * @enum {string}
             */
            audience: "all" | "guest" | "host";
            /**
             * @description An enum field
             * @default info
             * @enum {string}
             */
            importance: "info" | "notice" | "urgent";
            /**
             * @description A boolean field
             * @default false
             * @enum {string}
             */
            pinned: "0" | "1" | "t" | "true" | "f" | "false";
            /**
             * @description A datetime field
             * @default 2025-09-19T10:24:09.254Z
             */
            publishedAt: string;
            /** @description A dynamic zone field */
            body?: unknown[];
            /** @description A relational field */
            tags?: string[];
            /** @description A component field */
            seo?: unknown;
          };
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              title: string;
              /** @description A UID field */
              slug: string;
              /**
               * @description An enum field
               * @default all
               * @enum {string}
               */
              audience: "all" | "guest" | "host";
              /**
               * @description An enum field
               * @default info
               * @enum {string}
               */
              importance: "info" | "notice" | "urgent";
              /**
               * @description A boolean field
               * @default false
               */
              pinned: boolean;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.255Z
               */
              publishedAt: string;
              /** @description A dynamic zone field */
              body?: unknown[];
              /** @description A relational field */
              tags?: components["schemas"]["ApiTagTagDocument"][];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "announcement/get/announcements_by_id": {
    parameters: {
      query?: {
        fields?: ("title" | "slug" | "audience" | "importance" | "pinned" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | ("body" | "tags" | "seo") | ("body" | "tags" | "seo")[];
        filters?: {
          [key: string]: unknown;
        };
        sort?: ("title" | "slug" | "audience" | "importance" | "pinned" | "createdAt" | "updatedAt" | "publishedAt") | ("title" | "slug" | "audience" | "importance" | "pinned" | "createdAt" | "updatedAt" | "publishedAt")[] | {
          [key: string]: "asc" | "desc";
        } | {
          [key: string]: "asc" | "desc";
        }[];
        status?: "draft" | "published";
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              title: string;
              /** @description A UID field */
              slug: string;
              /**
               * @description An enum field
               * @default all
               * @enum {string}
               */
              audience: "all" | "guest" | "host";
              /**
               * @description An enum field
               * @default info
               * @enum {string}
               */
              importance: "info" | "notice" | "urgent";
              /**
               * @description A boolean field
               * @default false
               */
              pinned: boolean;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.253Z
               */
              publishedAt: string;
              /** @description A dynamic zone field */
              body?: unknown[];
              /** @description A relational field */
              tags?: components["schemas"]["ApiTagTagDocument"][];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "announcement/put/announcements_by_id": {
    parameters: {
      query?: {
        fields?: ("title" | "slug" | "audience" | "importance" | "pinned" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | ("body" | "tags" | "seo") | ("body" | "tags" | "seo")[];
        status?: "draft" | "published";
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": {
          data: {
            /** @description A string field */
            title?: string;
            /** @description A UID field */
            slug?: string;
            /**
             * @description An enum field
             * @default all
             * @enum {string}
             */
            audience?: "all" | "guest" | "host";
            /**
             * @description An enum field
             * @default info
             * @enum {string}
             */
            importance?: "info" | "notice" | "urgent";
            /**
             * @description A boolean field
             * @default false
             * @enum {string}
             */
            pinned?: "0" | "1" | "t" | "true" | "f" | "false";
            /**
             * @description A datetime field
             * @default 2025-09-19T10:24:09.257Z
             */
            publishedAt?: string;
            /** @description A dynamic zone field */
            body?: unknown[];
            /** @description A relational field */
            tags?: string[];
            /** @description A component field */
            seo?: unknown;
          };
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              title: string;
              /** @description A UID field */
              slug: string;
              /**
               * @description An enum field
               * @default all
               * @enum {string}
               */
              audience: "all" | "guest" | "host";
              /**
               * @description An enum field
               * @default info
               * @enum {string}
               */
              importance: "info" | "notice" | "urgent";
              /**
               * @description A boolean field
               * @default false
               */
              pinned: boolean;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.258Z
               */
              publishedAt: string;
              /** @description A dynamic zone field */
              body?: unknown[];
              /** @description A relational field */
              tags?: components["schemas"]["ApiTagTagDocument"][];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "announcement/delete/announcements_by_id": {
    parameters: {
      query?: {
        fields?: ("title" | "slug" | "audience" | "importance" | "pinned" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | ("body" | "tags" | "seo") | ("body" | "tags" | "seo")[];
        filters?: {
          [key: string]: unknown;
        };
        status?: "draft" | "published";
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              title: string;
              /** @description A UID field */
              slug: string;
              /**
               * @description An enum field
               * @default all
               * @enum {string}
               */
              audience: "all" | "guest" | "host";
              /**
               * @description An enum field
               * @default info
               * @enum {string}
               */
              importance: "info" | "notice" | "urgent";
              /**
               * @description A boolean field
               * @default false
               */
              pinned: boolean;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.259Z
               */
              publishedAt: string;
              /** @description A dynamic zone field */
              body?: unknown[];
              /** @description A relational field */
              tags?: components["schemas"]["ApiTagTagDocument"][];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "author/get/authors": {
    parameters: {
      query?: {
        fields?: ("name" | "email" | "createdAt" | "updatedAt" | "publishedAt")[];
        filters?: {
          [key: string]: unknown;
        };
        _q?: string;
        pagination?: {
          /** @description Include total count in response */
          withCount?: boolean;
        } & ({
          /** @description Page number (1-based) */
          page: number;
          /** @description Number of entries per page */
          pageSize: number;
        } | {
          /** @description Number of entries to skip */
          start: number;
          /** @description Maximum number of entries to return */
          limit: number;
        });
        sort?: ("name" | "email" | "createdAt" | "updatedAt" | "publishedAt") | ("name" | "email" | "createdAt" | "updatedAt" | "publishedAt")[] | {
          [key: string]: "asc" | "desc";
        } | {
          [key: string]: "asc" | "desc";
        }[];
        populate?: "*" | "avatar" | "avatar"[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              name?: string;
              /** @description A string field */
              email?: string;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.262Z
               */
              publishedAt: string;
              /** @description A media field */
              avatar?: components["schemas"]["PluginUploadFileDocument"];
            }[];
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "author/post/authors": {
    parameters: {
      query?: {
        fields?: ("name" | "email" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | "avatar" | "avatar"[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": {
          data: {
            /** @description A string field */
            name?: string;
            /** @description A string field */
            email?: string;
            /**
             * @description A datetime field
             * @default 2025-09-19T10:24:09.269Z
             */
            publishedAt: string;
            /** @description A media field */
            avatar?: unknown;
          };
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              name?: string;
              /** @description A string field */
              email?: string;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.269Z
               */
              publishedAt: string;
              /** @description A media field */
              avatar?: components["schemas"]["PluginUploadFileDocument"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "author/get/authors_by_id": {
    parameters: {
      query?: {
        fields?: ("name" | "email" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | "avatar" | "avatar"[];
        filters?: {
          [key: string]: unknown;
        };
        sort?: ("name" | "email" | "createdAt" | "updatedAt" | "publishedAt") | ("name" | "email" | "createdAt" | "updatedAt" | "publishedAt")[] | {
          [key: string]: "asc" | "desc";
        } | {
          [key: string]: "asc" | "desc";
        }[];
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              name?: string;
              /** @description A string field */
              email?: string;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.268Z
               */
              publishedAt: string;
              /** @description A media field */
              avatar?: components["schemas"]["PluginUploadFileDocument"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "author/put/authors_by_id": {
    parameters: {
      query?: {
        fields?: ("name" | "email" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | "avatar" | "avatar"[];
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": {
          data: {
            /** @description A string field */
            name?: string;
            /** @description A string field */
            email?: string;
            /**
             * @description A datetime field
             * @default 2025-09-19T10:24:09.270Z
             */
            publishedAt?: string;
            /** @description A media field */
            avatar?: unknown;
          };
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              name?: string;
              /** @description A string field */
              email?: string;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.271Z
               */
              publishedAt: string;
              /** @description A media field */
              avatar?: components["schemas"]["PluginUploadFileDocument"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "author/delete/authors_by_id": {
    parameters: {
      query?: {
        fields?: ("name" | "email" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | "avatar" | "avatar"[];
        filters?: {
          [key: string]: unknown;
        };
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              name?: string;
              /** @description A string field */
              email?: string;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.272Z
               */
              publishedAt: string;
              /** @description A media field */
              avatar?: components["schemas"]["PluginUploadFileDocument"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "blog-category/get/blog_categories": {
    parameters: {
      query?: {
        fields?: ("name" | "slug" | "createdAt" | "updatedAt" | "publishedAt")[];
        filters?: {
          [key: string]: unknown;
        };
        _q?: string;
        pagination?: {
          /** @description Include total count in response */
          withCount?: boolean;
        } & ({
          /** @description Page number (1-based) */
          page: number;
          /** @description Number of entries per page */
          pageSize: number;
        } | {
          /** @description Number of entries to skip */
          start: number;
          /** @description Maximum number of entries to return */
          limit: number;
        });
        sort?: ("name" | "slug" | "createdAt" | "updatedAt" | "publishedAt") | ("name" | "slug" | "createdAt" | "updatedAt" | "publishedAt")[] | {
          [key: string]: "asc" | "desc";
        } | {
          [key: string]: "asc" | "desc";
        }[];
        populate?: "*" | ("parent" | "seo") | ("parent" | "seo")[];
        status?: "draft" | "published";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              name?: string;
              /** @description A UID field */
              slug?: string;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.274Z
               */
              publishedAt: string;
              /** @description A relational field */
              parent?: components["schemas"]["ApiBlogCategoryBlogCategoryDocument"];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            }[];
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "blog-category/post/blog_categories": {
    parameters: {
      query?: {
        fields?: ("name" | "slug" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | ("parent" | "seo") | ("parent" | "seo")[];
        status?: "draft" | "published";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": {
          data: {
            /** @description A string field */
            name?: string;
            /** @description A UID field */
            slug?: string;
            /**
             * @description A datetime field
             * @default 2025-09-19T10:24:09.278Z
             */
            publishedAt: string;
            /**
             * Format: uuid
             * @description A relational field
             */
            parent?: string;
            /** @description A component field */
            seo?: unknown;
          };
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              name?: string;
              /** @description A UID field */
              slug?: string;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.279Z
               */
              publishedAt: string;
              /** @description A relational field */
              parent?: components["schemas"]["ApiBlogCategoryBlogCategoryDocument"];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "blog-category/get/blog_categories_by_id": {
    parameters: {
      query?: {
        fields?: ("name" | "slug" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | ("parent" | "seo") | ("parent" | "seo")[];
        filters?: {
          [key: string]: unknown;
        };
        sort?: ("name" | "slug" | "createdAt" | "updatedAt" | "publishedAt") | ("name" | "slug" | "createdAt" | "updatedAt" | "publishedAt")[] | {
          [key: string]: "asc" | "desc";
        } | {
          [key: string]: "asc" | "desc";
        }[];
        status?: "draft" | "published";
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              name?: string;
              /** @description A UID field */
              slug?: string;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.276Z
               */
              publishedAt: string;
              /** @description A relational field */
              parent?: components["schemas"]["ApiBlogCategoryBlogCategoryDocument"];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "blog-category/put/blog_categories_by_id": {
    parameters: {
      query?: {
        fields?: ("name" | "slug" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | ("parent" | "seo") | ("parent" | "seo")[];
        status?: "draft" | "published";
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": {
          data: {
            /** @description A string field */
            name?: string;
            /** @description A UID field */
            slug?: string;
            /**
             * @description A datetime field
             * @default 2025-09-19T10:24:09.280Z
             */
            publishedAt?: string;
            /**
             * Format: uuid
             * @description A relational field
             */
            parent?: string;
            /** @description A component field */
            seo?: unknown;
          };
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              name?: string;
              /** @description A UID field */
              slug?: string;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.280Z
               */
              publishedAt: string;
              /** @description A relational field */
              parent?: components["schemas"]["ApiBlogCategoryBlogCategoryDocument"];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "blog-category/delete/blog_categories_by_id": {
    parameters: {
      query?: {
        fields?: ("name" | "slug" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | ("parent" | "seo") | ("parent" | "seo")[];
        filters?: {
          [key: string]: unknown;
        };
        status?: "draft" | "published";
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              name?: string;
              /** @description A UID field */
              slug?: string;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.281Z
               */
              publishedAt: string;
              /** @description A relational field */
              parent?: components["schemas"]["ApiBlogCategoryBlogCategoryDocument"];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "blog-post/get/blog_posts": {
    parameters: {
      query?: {
        fields?: ("title" | "slug" | "excerpt" | "readingTime" | "featured" | "createdAt" | "updatedAt" | "publishedAt")[];
        filters?: {
          [key: string]: unknown;
        };
        _q?: string;
        pagination?: {
          /** @description Include total count in response */
          withCount?: boolean;
        } & ({
          /** @description Page number (1-based) */
          page: number;
          /** @description Number of entries per page */
          pageSize: number;
        } | {
          /** @description Number of entries to skip */
          start: number;
          /** @description Maximum number of entries to return */
          limit: number;
        });
        sort?: ("title" | "slug" | "excerpt" | "readingTime" | "featured" | "createdAt" | "updatedAt" | "publishedAt") | ("title" | "slug" | "excerpt" | "readingTime" | "featured" | "createdAt" | "updatedAt" | "publishedAt")[] | {
          [key: string]: "asc" | "desc";
        } | {
          [key: string]: "asc" | "desc";
        }[];
        populate?: "*" | ("coverImage" | "content" | "category" | "tags" | "seo") | ("coverImage" | "content" | "category" | "tags" | "seo")[];
        status?: "draft" | "published";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              title: string;
              /** @description A UID field */
              slug: string;
              /** @description A text field */
              excerpt?: string;
              /** @description An integer field */
              readingTime?: number;
              /**
               * @description A boolean field
               * @default false
               */
              featured: boolean;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.283Z
               */
              publishedAt: string;
              /** @description A media field */
              coverImage?: components["schemas"]["PluginUploadFileDocument"];
              /** @description A dynamic zone field */
              content?: unknown[];
              /** @description A relational field */
              category?: components["schemas"]["ApiBlogCategoryBlogCategoryDocument"];
              /** @description A relational field */
              tags?: components["schemas"]["ApiTagTagDocument"][];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            }[];
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "blog-post/post/blog_posts": {
    parameters: {
      query?: {
        fields?: ("title" | "slug" | "excerpt" | "readingTime" | "featured" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | ("coverImage" | "content" | "category" | "tags" | "seo") | ("coverImage" | "content" | "category" | "tags" | "seo")[];
        status?: "draft" | "published";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": {
          data: {
            /** @description A string field */
            title: string;
            /** @description A UID field */
            slug: string;
            /** @description A text field */
            excerpt?: string;
            /** @description A float field */
            readingTime?: number;
            /**
             * @description A boolean field
             * @default false
             * @enum {string}
             */
            featured: "0" | "1" | "t" | "true" | "f" | "false";
            /**
             * @description A datetime field
             * @default 2025-09-19T10:24:09.286Z
             */
            publishedAt: string;
            /** @description A media field */
            coverImage?: unknown;
            /** @description A dynamic zone field */
            content?: unknown[];
            /**
             * Format: uuid
             * @description A relational field
             */
            category?: string;
            /** @description A relational field */
            tags?: string[];
            /** @description A component field */
            seo?: unknown;
          };
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              title: string;
              /** @description A UID field */
              slug: string;
              /** @description A text field */
              excerpt?: string;
              /** @description An integer field */
              readingTime?: number;
              /**
               * @description A boolean field
               * @default false
               */
              featured: boolean;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.289Z
               */
              publishedAt: string;
              /** @description A media field */
              coverImage?: components["schemas"]["PluginUploadFileDocument"];
              /** @description A dynamic zone field */
              content?: unknown[];
              /** @description A relational field */
              category?: components["schemas"]["ApiBlogCategoryBlogCategoryDocument"];
              /** @description A relational field */
              tags?: components["schemas"]["ApiTagTagDocument"][];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "blog-post/get/blog_posts_by_id": {
    parameters: {
      query?: {
        fields?: ("title" | "slug" | "excerpt" | "readingTime" | "featured" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | ("coverImage" | "content" | "category" | "tags" | "seo") | ("coverImage" | "content" | "category" | "tags" | "seo")[];
        filters?: {
          [key: string]: unknown;
        };
        sort?: ("title" | "slug" | "excerpt" | "readingTime" | "featured" | "createdAt" | "updatedAt" | "publishedAt") | ("title" | "slug" | "excerpt" | "readingTime" | "featured" | "createdAt" | "updatedAt" | "publishedAt")[] | {
          [key: string]: "asc" | "desc";
        } | {
          [key: string]: "asc" | "desc";
        }[];
        status?: "draft" | "published";
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              title: string;
              /** @description A UID field */
              slug: string;
              /** @description A text field */
              excerpt?: string;
              /** @description An integer field */
              readingTime?: number;
              /**
               * @description A boolean field
               * @default false
               */
              featured: boolean;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.285Z
               */
              publishedAt: string;
              /** @description A media field */
              coverImage?: components["schemas"]["PluginUploadFileDocument"];
              /** @description A dynamic zone field */
              content?: unknown[];
              /** @description A relational field */
              category?: components["schemas"]["ApiBlogCategoryBlogCategoryDocument"];
              /** @description A relational field */
              tags?: components["schemas"]["ApiTagTagDocument"][];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "blog-post/put/blog_posts_by_id": {
    parameters: {
      query?: {
        fields?: ("title" | "slug" | "excerpt" | "readingTime" | "featured" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | ("coverImage" | "content" | "category" | "tags" | "seo") | ("coverImage" | "content" | "category" | "tags" | "seo")[];
        status?: "draft" | "published";
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": {
          data: {
            /** @description A string field */
            title?: string;
            /** @description A UID field */
            slug?: string;
            /** @description A text field */
            excerpt?: string;
            /** @description A float field */
            readingTime?: number;
            /**
             * @description A boolean field
             * @default false
             * @enum {string}
             */
            featured?: "0" | "1" | "t" | "true" | "f" | "false";
            /**
             * @description A datetime field
             * @default 2025-09-19T10:24:09.290Z
             */
            publishedAt?: string;
            /** @description A media field */
            coverImage?: unknown;
            /** @description A dynamic zone field */
            content?: unknown[];
            /**
             * Format: uuid
             * @description A relational field
             */
            category?: string;
            /** @description A relational field */
            tags?: string[];
            /** @description A component field */
            seo?: unknown;
          };
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              title: string;
              /** @description A UID field */
              slug: string;
              /** @description A text field */
              excerpt?: string;
              /** @description An integer field */
              readingTime?: number;
              /**
               * @description A boolean field
               * @default false
               */
              featured: boolean;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.291Z
               */
              publishedAt: string;
              /** @description A media field */
              coverImage?: components["schemas"]["PluginUploadFileDocument"];
              /** @description A dynamic zone field */
              content?: unknown[];
              /** @description A relational field */
              category?: components["schemas"]["ApiBlogCategoryBlogCategoryDocument"];
              /** @description A relational field */
              tags?: components["schemas"]["ApiTagTagDocument"][];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "blog-post/delete/blog_posts_by_id": {
    parameters: {
      query?: {
        fields?: ("title" | "slug" | "excerpt" | "readingTime" | "featured" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | ("coverImage" | "content" | "category" | "tags" | "seo") | ("coverImage" | "content" | "category" | "tags" | "seo")[];
        filters?: {
          [key: string]: unknown;
        };
        status?: "draft" | "published";
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              title: string;
              /** @description A UID field */
              slug: string;
              /** @description A text field */
              excerpt?: string;
              /** @description An integer field */
              readingTime?: number;
              /**
               * @description A boolean field
               * @default false
               */
              featured: boolean;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.292Z
               */
              publishedAt: string;
              /** @description A media field */
              coverImage?: components["schemas"]["PluginUploadFileDocument"];
              /** @description A dynamic zone field */
              content?: unknown[];
              /** @description A relational field */
              category?: components["schemas"]["ApiBlogCategoryBlogCategoryDocument"];
              /** @description A relational field */
              tags?: components["schemas"]["ApiTagTagDocument"][];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "faq/get/faqs": {
    parameters: {
      query?: {
        fields?: ("question" | "pin" | "order" | "createdAt" | "updatedAt" | "publishedAt")[];
        filters?: {
          [key: string]: unknown;
        };
        _q?: string;
        pagination?: {
          /** @description Include total count in response */
          withCount?: boolean;
        } & ({
          /** @description Page number (1-based) */
          page: number;
          /** @description Number of entries per page */
          pageSize: number;
        } | {
          /** @description Number of entries to skip */
          start: number;
          /** @description Maximum number of entries to return */
          limit: number;
        });
        sort?: ("question" | "pin" | "order" | "createdAt" | "updatedAt" | "publishedAt") | ("question" | "pin" | "order" | "createdAt" | "updatedAt" | "publishedAt")[] | {
          [key: string]: "asc" | "desc";
        } | {
          [key: string]: "asc" | "desc";
        }[];
        populate?: "*" | ("answer" | "category" | "tags" | "relatedFaqs" | "seo") | ("answer" | "category" | "tags" | "relatedFaqs" | "seo")[];
        status?: "draft" | "published";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              question: string;
              /**
               * @description A boolean field
               * @default false
               */
              pin: boolean;
              /**
               * @description An integer field
               * @default 0
               */
              order: number;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.294Z
               */
              publishedAt: string;
              /** @description A dynamic zone field */
              answer?: unknown[];
              /** @description A relational field */
              category?: components["schemas"]["ApiFaqCategoryFaqCategoryDocument"];
              /** @description A relational field */
              tags?: components["schemas"]["ApiTagTagDocument"][];
              /** @description A relational field */
              relatedFaqs?: components["schemas"]["ApiFaqFaqDocument"][];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            }[];
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "faq/post/faqs": {
    parameters: {
      query?: {
        fields?: ("question" | "pin" | "order" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | ("answer" | "category" | "tags" | "relatedFaqs" | "seo") | ("answer" | "category" | "tags" | "relatedFaqs" | "seo")[];
        status?: "draft" | "published";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": {
          data: {
            /** @description A string field */
            question: string;
            /**
             * @description A boolean field
             * @default false
             * @enum {string}
             */
            pin: "0" | "1" | "t" | "true" | "f" | "false";
            /**
             * @description A float field
             * @default 0
             */
            order: number;
            /**
             * @description A datetime field
             * @default 2025-09-19T10:24:09.300Z
             */
            publishedAt: string;
            /** @description A dynamic zone field */
            answer?: unknown[];
            /**
             * Format: uuid
             * @description A relational field
             */
            category?: string;
            /** @description A relational field */
            tags?: string[];
            /** @description A relational field */
            relatedFaqs?: string[];
            /** @description A component field */
            seo?: unknown;
          };
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              question: string;
              /**
               * @description A boolean field
               * @default false
               */
              pin: boolean;
              /**
               * @description An integer field
               * @default 0
               */
              order: number;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.301Z
               */
              publishedAt: string;
              /** @description A dynamic zone field */
              answer?: unknown[];
              /** @description A relational field */
              category?: components["schemas"]["ApiFaqCategoryFaqCategoryDocument"];
              /** @description A relational field */
              tags?: components["schemas"]["ApiTagTagDocument"][];
              /** @description A relational field */
              relatedFaqs?: components["schemas"]["ApiFaqFaqDocument"][];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "faq/get/faqs_by_id": {
    parameters: {
      query?: {
        fields?: ("question" | "pin" | "order" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | ("answer" | "category" | "tags" | "relatedFaqs" | "seo") | ("answer" | "category" | "tags" | "relatedFaqs" | "seo")[];
        filters?: {
          [key: string]: unknown;
        };
        sort?: ("question" | "pin" | "order" | "createdAt" | "updatedAt" | "publishedAt") | ("question" | "pin" | "order" | "createdAt" | "updatedAt" | "publishedAt")[] | {
          [key: string]: "asc" | "desc";
        } | {
          [key: string]: "asc" | "desc";
        }[];
        status?: "draft" | "published";
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              question: string;
              /**
               * @description A boolean field
               * @default false
               */
              pin: boolean;
              /**
               * @description An integer field
               * @default 0
               */
              order: number;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.299Z
               */
              publishedAt: string;
              /** @description A dynamic zone field */
              answer?: unknown[];
              /** @description A relational field */
              category?: components["schemas"]["ApiFaqCategoryFaqCategoryDocument"];
              /** @description A relational field */
              tags?: components["schemas"]["ApiTagTagDocument"][];
              /** @description A relational field */
              relatedFaqs?: components["schemas"]["ApiFaqFaqDocument"][];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "faq/put/faqs_by_id": {
    parameters: {
      query?: {
        fields?: ("question" | "pin" | "order" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | ("answer" | "category" | "tags" | "relatedFaqs" | "seo") | ("answer" | "category" | "tags" | "relatedFaqs" | "seo")[];
        status?: "draft" | "published";
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": {
          data: {
            /** @description A string field */
            question?: string;
            /**
             * @description A boolean field
             * @default false
             * @enum {string}
             */
            pin?: "0" | "1" | "t" | "true" | "f" | "false";
            /**
             * @description A float field
             * @default 0
             */
            order?: number;
            /**
             * @description A datetime field
             * @default 2025-09-19T10:24:09.302Z
             */
            publishedAt?: string;
            /** @description A dynamic zone field */
            answer?: unknown[];
            /**
             * Format: uuid
             * @description A relational field
             */
            category?: string;
            /** @description A relational field */
            tags?: string[];
            /** @description A relational field */
            relatedFaqs?: string[];
            /** @description A component field */
            seo?: unknown;
          };
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              question: string;
              /**
               * @description A boolean field
               * @default false
               */
              pin: boolean;
              /**
               * @description An integer field
               * @default 0
               */
              order: number;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.302Z
               */
              publishedAt: string;
              /** @description A dynamic zone field */
              answer?: unknown[];
              /** @description A relational field */
              category?: components["schemas"]["ApiFaqCategoryFaqCategoryDocument"];
              /** @description A relational field */
              tags?: components["schemas"]["ApiTagTagDocument"][];
              /** @description A relational field */
              relatedFaqs?: components["schemas"]["ApiFaqFaqDocument"][];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "faq/delete/faqs_by_id": {
    parameters: {
      query?: {
        fields?: ("question" | "pin" | "order" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | ("answer" | "category" | "tags" | "relatedFaqs" | "seo") | ("answer" | "category" | "tags" | "relatedFaqs" | "seo")[];
        filters?: {
          [key: string]: unknown;
        };
        status?: "draft" | "published";
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              question: string;
              /**
               * @description A boolean field
               * @default false
               */
              pin: boolean;
              /**
               * @description An integer field
               * @default 0
               */
              order: number;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.303Z
               */
              publishedAt: string;
              /** @description A dynamic zone field */
              answer?: unknown[];
              /** @description A relational field */
              category?: components["schemas"]["ApiFaqCategoryFaqCategoryDocument"];
              /** @description A relational field */
              tags?: components["schemas"]["ApiTagTagDocument"][];
              /** @description A relational field */
              relatedFaqs?: components["schemas"]["ApiFaqFaqDocument"][];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "faq-category/get/faq_categories": {
    parameters: {
      query?: {
        fields?: ("name" | "slug" | "audience" | "description" | "order" | "createdAt" | "updatedAt" | "publishedAt")[];
        filters?: {
          [key: string]: unknown;
        };
        _q?: string;
        pagination?: {
          /** @description Include total count in response */
          withCount?: boolean;
        } & ({
          /** @description Page number (1-based) */
          page: number;
          /** @description Number of entries per page */
          pageSize: number;
        } | {
          /** @description Number of entries to skip */
          start: number;
          /** @description Maximum number of entries to return */
          limit: number;
        });
        sort?: ("name" | "slug" | "audience" | "description" | "order" | "createdAt" | "updatedAt" | "publishedAt") | ("name" | "slug" | "audience" | "description" | "order" | "createdAt" | "updatedAt" | "publishedAt")[] | {
          [key: string]: "asc" | "desc";
        } | {
          [key: string]: "asc" | "desc";
        }[];
        populate?: "*" | ("faqs" | "seo") | ("faqs" | "seo")[];
        status?: "draft" | "published";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              name: string;
              /** @description A UID field */
              slug: string;
              /**
               * @description An enum field
               * @enum {string}
               */
              audience?: "guest" | "host";
              /** @description A text field */
              description?: string;
              /**
               * @description An integer field
               * @default 0
               */
              order: number;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.306Z
               */
              publishedAt: string;
              /** @description A relational field */
              faqs?: components["schemas"]["ApiFaqFaqDocument"][];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            }[];
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "faq-category/post/faq_categories": {
    parameters: {
      query?: {
        fields?: ("name" | "slug" | "audience" | "description" | "order" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | ("faqs" | "seo") | ("faqs" | "seo")[];
        status?: "draft" | "published";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": {
          data: {
            /** @description A string field */
            name: string;
            /** @description A UID field */
            slug: string;
            /**
             * @description An enum field
             * @enum {string}
             */
            audience?: "guest" | "host";
            /** @description A text field */
            description?: string;
            /**
             * @description A float field
             * @default 0
             */
            order: number;
            /**
             * @description A datetime field
             * @default 2025-09-19T10:24:09.310Z
             */
            publishedAt: string;
            /** @description A relational field */
            faqs?: string[];
            /** @description A component field */
            seo?: unknown;
          };
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              name: string;
              /** @description A UID field */
              slug: string;
              /**
               * @description An enum field
               * @enum {string}
               */
              audience?: "guest" | "host";
              /** @description A text field */
              description?: string;
              /**
               * @description An integer field
               * @default 0
               */
              order: number;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.310Z
               */
              publishedAt: string;
              /** @description A relational field */
              faqs?: components["schemas"]["ApiFaqFaqDocument"][];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "faq-category/get/faq_categories_by_id": {
    parameters: {
      query?: {
        fields?: ("name" | "slug" | "audience" | "description" | "order" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | ("faqs" | "seo") | ("faqs" | "seo")[];
        filters?: {
          [key: string]: unknown;
        };
        sort?: ("name" | "slug" | "audience" | "description" | "order" | "createdAt" | "updatedAt" | "publishedAt") | ("name" | "slug" | "audience" | "description" | "order" | "createdAt" | "updatedAt" | "publishedAt")[] | {
          [key: string]: "asc" | "desc";
        } | {
          [key: string]: "asc" | "desc";
        }[];
        status?: "draft" | "published";
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              name: string;
              /** @description A UID field */
              slug: string;
              /**
               * @description An enum field
               * @enum {string}
               */
              audience?: "guest" | "host";
              /** @description A text field */
              description?: string;
              /**
               * @description An integer field
               * @default 0
               */
              order: number;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.309Z
               */
              publishedAt: string;
              /** @description A relational field */
              faqs?: components["schemas"]["ApiFaqFaqDocument"][];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "faq-category/put/faq_categories_by_id": {
    parameters: {
      query?: {
        fields?: ("name" | "slug" | "audience" | "description" | "order" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | ("faqs" | "seo") | ("faqs" | "seo")[];
        status?: "draft" | "published";
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": {
          data: {
            /** @description A string field */
            name?: string;
            /** @description A UID field */
            slug?: string;
            /**
             * @description An enum field
             * @enum {string}
             */
            audience?: "guest" | "host";
            /** @description A text field */
            description?: string;
            /**
             * @description A float field
             * @default 0
             */
            order?: number;
            /**
             * @description A datetime field
             * @default 2025-09-19T10:24:09.311Z
             */
            publishedAt?: string;
            /** @description A relational field */
            faqs?: string[];
            /** @description A component field */
            seo?: unknown;
          };
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              name: string;
              /** @description A UID field */
              slug: string;
              /**
               * @description An enum field
               * @enum {string}
               */
              audience?: "guest" | "host";
              /** @description A text field */
              description?: string;
              /**
               * @description An integer field
               * @default 0
               */
              order: number;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.312Z
               */
              publishedAt: string;
              /** @description A relational field */
              faqs?: components["schemas"]["ApiFaqFaqDocument"][];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "faq-category/delete/faq_categories_by_id": {
    parameters: {
      query?: {
        fields?: ("name" | "slug" | "audience" | "description" | "order" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | ("faqs" | "seo") | ("faqs" | "seo")[];
        filters?: {
          [key: string]: unknown;
        };
        status?: "draft" | "published";
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              name: string;
              /** @description A UID field */
              slug: string;
              /**
               * @description An enum field
               * @enum {string}
               */
              audience?: "guest" | "host";
              /** @description A text field */
              description?: string;
              /**
               * @description An integer field
               * @default 0
               */
              order: number;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.313Z
               */
              publishedAt: string;
              /** @description A relational field */
              faqs?: components["schemas"]["ApiFaqFaqDocument"][];
              /** @description A component field */
              seo?: components["schemas"]["SeoMetaEntry"];
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "tag/get/tags": {
    parameters: {
      query?: {
        fields?: ("name" | "slug" | "createdAt" | "updatedAt" | "publishedAt")[];
        filters?: {
          [key: string]: unknown;
        };
        _q?: string;
        pagination?: {
          /** @description Include total count in response */
          withCount?: boolean;
        } & ({
          /** @description Page number (1-based) */
          page: number;
          /** @description Number of entries per page */
          pageSize: number;
        } | {
          /** @description Number of entries to skip */
          start: number;
          /** @description Maximum number of entries to return */
          limit: number;
        });
        sort?: ("name" | "slug" | "createdAt" | "updatedAt" | "publishedAt") | ("name" | "slug" | "createdAt" | "updatedAt" | "publishedAt")[] | {
          [key: string]: "asc" | "desc";
        } | {
          [key: string]: "asc" | "desc";
        }[];
        populate?: "*" | never | never[];
        status?: "draft" | "published";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              name?: string;
              /** @description A UID field */
              slug?: string;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.315Z
               */
              publishedAt: string;
            }[];
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "tag/post/tags": {
    parameters: {
      query?: {
        fields?: ("name" | "slug" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | never | never[];
        status?: "draft" | "published";
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": {
          data: {
            /** @description A string field */
            name?: string;
            /** @description A UID field */
            slug?: string;
            /**
             * @description A datetime field
             * @default 2025-09-19T10:24:09.758Z
             */
            publishedAt: string;
          };
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              name?: string;
              /** @description A UID field */
              slug?: string;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.319Z
               */
              publishedAt: string;
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "tag/get/tags_by_id": {
    parameters: {
      query?: {
        fields?: ("name" | "slug" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | never | never[];
        filters?: {
          [key: string]: unknown;
        };
        sort?: ("name" | "slug" | "createdAt" | "updatedAt" | "publishedAt") | ("name" | "slug" | "createdAt" | "updatedAt" | "publishedAt")[] | {
          [key: string]: "asc" | "desc";
        } | {
          [key: string]: "asc" | "desc";
        }[];
        status?: "draft" | "published";
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              name?: string;
              /** @description A UID field */
              slug?: string;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.316Z
               */
              publishedAt: string;
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "tag/put/tags_by_id": {
    parameters: {
      query?: {
        fields?: ("name" | "slug" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | never | never[];
        status?: "draft" | "published";
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": {
          data: {
            /** @description A string field */
            name?: string;
            /** @description A UID field */
            slug?: string;
            /**
             * @description A datetime field
             * @default 2025-09-19T10:24:09.319Z
             */
            publishedAt?: string;
          };
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              name?: string;
              /** @description A UID field */
              slug?: string;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.320Z
               */
              publishedAt: string;
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "tag/delete/tags_by_id": {
    parameters: {
      query?: {
        fields?: ("name" | "slug" | "createdAt" | "updatedAt" | "publishedAt")[];
        populate?: "*" | never | never[];
        filters?: {
          [key: string]: unknown;
        };
        status?: "draft" | "published";
      };
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: {
              /**
               * Format: uuid
               * @description The document ID, represented by a UUID
               */
              documentId: string;
              id: number;
              /** @description A string field */
              name?: string;
              /** @description A UID field */
              slug?: string;
              /** @description A datetime field */
              createdAt?: string;
              /** @description A datetime field */
              updatedAt?: string;
              /**
               * @description A datetime field
               * @default 2025-09-19T10:24:09.320Z
               */
              publishedAt: string;
            };
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
